问题描述：
链接：https://www.nowcoder.com/questionTerminal/33531f7052f64fb5838e74fc7e869edd
来源：牛客网

小易非常喜欢拥有以下性质的数列:
1、数列的长度为n
2、数列中的每个数都在1到k之间(包括1和k)
3、对于位置相邻的两个数A和B(A在B前),都满足(A <= B)或(A mod B != 0)(满足其一即可)
例如,当n = 4, k = 7
那么{1,7,7,2},它的长度是4,所有数字也在1到7范围内,并且满足第三条性质,所以小易是喜欢这个数列的
但是小易不喜欢{4,4,4,2}这个数列。小易给出n和k,希望你能帮他求出有多少个是他会喜欢的数列。 

（1）一开始的思路是通过回溯的方法，用List记录已经添加的数，当List.size()==n时，即将统计值cases++;在对List增加数时需要考虑是否可以添加，
只加能添加的。依次判断共可以有多少种情况。
回溯：
public static void jisuan(int n, int k,List<Integer> list){
        if(list.size() == n){
            cases++;
            return;
        }
        for(int i=1;i<=k;i++){
            if(list.size()==0){
                list.add(i);
                jisuan(n,k,list);
                list.remove(0);
            }
            else{
                if(list.get(list.size()-1)<=i || list.get(list.size()-1)%i!=0){
                    list.add(i);
                    jisuan(n,k,list);
                    list.remove(list.size()-1);
                }
                
            }
        }
调用：      
jisuan(n,k,new ArrayList<Integer>());
System.out.println(cases);   
方法超时，因为存在大量的重复判断。。。

（2）动态规划法
dp[i][j]：数列长度为i，最后一个数值为j的时候，小易喜欢的数列个数
初始条件：for(i=1...k) dp[1][i] = 1; 即数列长度为1，并且从1~k每个数为数列结尾
转义方程：dp[i][j] = sum(dp[i-1][1...k]) - sum(dp[i-1][x]);其中x为不满足的情况  即 x为i-1数列的最后一值，
         而y>x && y%x==0 (题目的符合情况取反)的情况
         方程相当于如果i-1个数列后面任意加一个数字都符合的情况数 - 那些不符合的情况数
最终结果：sum(dp[n][1...k]);

import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
 
public class Main{
    //public static int cases = 0;
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int k = in.nextInt();
        
        //dp 前i个数，最后一个数是j时 ， 小易喜欢的个数
        int[][] dp = new int[n+1][k+1];
        //若只有一个数，且分别用1~k结束时都只有一个喜欢的队列，用于dp初始化
        for(int i=1;i<=k;i++){
            dp[1][i] = 1;
        }
        for(int i=2;i<=n;i++){
            int sum = 0; //假设所有加一个都符合的情况数
            for(int j=1;j<=k;j++){
                sum += dp[i-1][j];
                sum = sum%1000000007;
            }
            
            for(int x=1;x<=k;x++){
                int sum2 = 0; //不符合的
                for(int j=x+x;j<=k;j=j+x){
                    sum2 += dp[i-1][j];
                    sum2 = sum2%1000000007;
                }
                dp[i][x] = (sum - sum2+1000000007)%1000000007;
            }
            
            
        }
        int total = 0;
        for(int i=1;i<=k;i++){
            total += dp[n][i];
            total = total%1000000007;
        }
        System.out.println(total);
    }
}
